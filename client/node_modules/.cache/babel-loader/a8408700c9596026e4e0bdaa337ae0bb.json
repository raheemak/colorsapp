{"ast":null,"code":"'use strict';\n\nfunction formatHostname(hostname) {\n  // canonicalize the hostname, so that 'oogle.com' won't match 'google.com'\n  return hostname.replace(/^\\.*/, '.').toLowerCase();\n}\n\nfunction parseNoProxyZone(zone) {\n  zone = zone.trim().toLowerCase();\n  var zoneParts = zone.split(':', 2),\n      zoneHost = formatHostname(zoneParts[0]),\n      zonePort = zoneParts[1],\n      hasPort = zone.indexOf(':') > -1;\n  return {\n    hostname: zoneHost,\n    port: zonePort,\n    hasPort: hasPort\n  };\n}\n\nfunction uriInNoProxy(uri, noProxy) {\n  var port = uri.port || (uri.protocol === 'https:' ? '443' : '80'),\n      hostname = formatHostname(uri.hostname),\n      noProxyList = noProxy.split(','); // iterate through the noProxyList until it finds a match.\n\n  return noProxyList.map(parseNoProxyZone).some(function (noProxyZone) {\n    var isMatchedAt = hostname.indexOf(noProxyZone.hostname),\n        hostnameMatched = isMatchedAt > -1 && isMatchedAt === hostname.length - noProxyZone.hostname.length;\n\n    if (noProxyZone.hasPort) {\n      return port === noProxyZone.port && hostnameMatched;\n    }\n\n    return hostnameMatched;\n  });\n}\n\nfunction getProxyFromURI(uri) {\n  // Decide the proper request proxy to use based on the request URI object and the\n  // environmental variables (NO_PROXY, HTTP_PROXY, etc.)\n  // respect NO_PROXY environment variables (see: http://lynx.isc.org/current/breakout/lynx_help/keystrokes/environments.html)\n  var noProxy = process.env.NO_PROXY || process.env.no_proxy || ''; // if the noProxy is a wildcard then return null\n\n  if (noProxy === '*') {\n    return null;\n  } // if the noProxy is not empty and the uri is found return null\n\n\n  if (noProxy !== '' && uriInNoProxy(uri, noProxy)) {\n    return null;\n  } // Check for HTTP or HTTPS Proxy in environment Else default to null\n\n\n  if (uri.protocol === 'http:') {\n    return process.env.HTTP_PROXY || process.env.http_proxy || null;\n  }\n\n  if (uri.protocol === 'https:') {\n    return process.env.HTTPS_PROXY || process.env.https_proxy || process.env.HTTP_PROXY || process.env.http_proxy || null;\n  } // if none of that works, return null\n  // (What uri protocol are you using then?)\n\n\n  return null;\n}\n\nmodule.exports = getProxyFromURI;","map":{"version":3,"names":["formatHostname","hostname","replace","toLowerCase","parseNoProxyZone","zone","trim","zoneParts","split","zoneHost","zonePort","hasPort","indexOf","port","uriInNoProxy","uri","noProxy","protocol","noProxyList","map","some","noProxyZone","isMatchedAt","hostnameMatched","length","getProxyFromURI","process","env","NO_PROXY","no_proxy","HTTP_PROXY","http_proxy","HTTPS_PROXY","https_proxy","module","exports"],"sources":["/Users/raheema/Desktop/Colors/node_modules/request/lib/getProxyFromURI.js"],"sourcesContent":["'use strict'\n\nfunction formatHostname(hostname) {\n  // canonicalize the hostname, so that 'oogle.com' won't match 'google.com'\n  return hostname.replace(/^\\.*/, '.').toLowerCase()\n}\n\nfunction parseNoProxyZone(zone) {\n  zone = zone.trim().toLowerCase()\n\n  var zoneParts = zone.split(':', 2)\n    , zoneHost = formatHostname(zoneParts[0])\n    , zonePort = zoneParts[1]\n    , hasPort = zone.indexOf(':') > -1\n\n  return {hostname: zoneHost, port: zonePort, hasPort: hasPort}\n}\n\nfunction uriInNoProxy(uri, noProxy) {\n  var port = uri.port || (uri.protocol === 'https:' ? '443' : '80')\n    , hostname = formatHostname(uri.hostname)\n    , noProxyList = noProxy.split(',')\n\n  // iterate through the noProxyList until it finds a match.\n  return noProxyList.map(parseNoProxyZone).some(function(noProxyZone) {\n    var isMatchedAt = hostname.indexOf(noProxyZone.hostname)\n      , hostnameMatched = (\n          isMatchedAt > -1 &&\n          (isMatchedAt === hostname.length - noProxyZone.hostname.length)\n        )\n\n    if (noProxyZone.hasPort) {\n      return (port === noProxyZone.port) && hostnameMatched\n    }\n\n    return hostnameMatched\n  })\n}\n\nfunction getProxyFromURI(uri) {\n  // Decide the proper request proxy to use based on the request URI object and the\n  // environmental variables (NO_PROXY, HTTP_PROXY, etc.)\n  // respect NO_PROXY environment variables (see: http://lynx.isc.org/current/breakout/lynx_help/keystrokes/environments.html)\n\n  var noProxy = process.env.NO_PROXY || process.env.no_proxy || ''\n\n  // if the noProxy is a wildcard then return null\n\n  if (noProxy === '*') {\n    return null\n  }\n\n  // if the noProxy is not empty and the uri is found return null\n\n  if (noProxy !== '' && uriInNoProxy(uri, noProxy)) {\n    return null\n  }\n\n  // Check for HTTP or HTTPS Proxy in environment Else default to null\n\n  if (uri.protocol === 'http:') {\n    return process.env.HTTP_PROXY ||\n           process.env.http_proxy || null\n  }\n\n  if (uri.protocol === 'https:') {\n    return process.env.HTTPS_PROXY ||\n           process.env.https_proxy ||\n           process.env.HTTP_PROXY  ||\n           process.env.http_proxy  || null\n  }\n\n  // if none of that works, return null\n  // (What uri protocol are you using then?)\n\n  return null\n}\n\nmodule.exports = getProxyFromURI\n"],"mappings":"AAAA;;AAEA,SAASA,cAAT,CAAwBC,QAAxB,EAAkC;EAChC;EACA,OAAOA,QAAQ,CAACC,OAAT,CAAiB,MAAjB,EAAyB,GAAzB,EAA8BC,WAA9B,EAAP;AACD;;AAED,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;EAC9BA,IAAI,GAAGA,IAAI,CAACC,IAAL,GAAYH,WAAZ,EAAP;EAEA,IAAII,SAAS,GAAGF,IAAI,CAACG,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAhB;EAAA,IACIC,QAAQ,GAAGT,cAAc,CAACO,SAAS,CAAC,CAAD,CAAV,CAD7B;EAAA,IAEIG,QAAQ,GAAGH,SAAS,CAAC,CAAD,CAFxB;EAAA,IAGII,OAAO,GAAGN,IAAI,CAACO,OAAL,CAAa,GAAb,IAAoB,CAAC,CAHnC;EAKA,OAAO;IAACX,QAAQ,EAAEQ,QAAX;IAAqBI,IAAI,EAAEH,QAA3B;IAAqCC,OAAO,EAAEA;EAA9C,CAAP;AACD;;AAED,SAASG,YAAT,CAAsBC,GAAtB,EAA2BC,OAA3B,EAAoC;EAClC,IAAIH,IAAI,GAAGE,GAAG,CAACF,IAAJ,KAAaE,GAAG,CAACE,QAAJ,KAAiB,QAAjB,GAA4B,KAA5B,GAAoC,IAAjD,CAAX;EAAA,IACIhB,QAAQ,GAAGD,cAAc,CAACe,GAAG,CAACd,QAAL,CAD7B;EAAA,IAEIiB,WAAW,GAAGF,OAAO,CAACR,KAAR,CAAc,GAAd,CAFlB,CADkC,CAKlC;;EACA,OAAOU,WAAW,CAACC,GAAZ,CAAgBf,gBAAhB,EAAkCgB,IAAlC,CAAuC,UAASC,WAAT,EAAsB;IAClE,IAAIC,WAAW,GAAGrB,QAAQ,CAACW,OAAT,CAAiBS,WAAW,CAACpB,QAA7B,CAAlB;IAAA,IACIsB,eAAe,GACbD,WAAW,GAAG,CAAC,CAAf,IACCA,WAAW,KAAKrB,QAAQ,CAACuB,MAAT,GAAkBH,WAAW,CAACpB,QAAZ,CAAqBuB,MAH9D;;IAMA,IAAIH,WAAW,CAACV,OAAhB,EAAyB;MACvB,OAAQE,IAAI,KAAKQ,WAAW,CAACR,IAAtB,IAA+BU,eAAtC;IACD;;IAED,OAAOA,eAAP;EACD,CAZM,CAAP;AAaD;;AAED,SAASE,eAAT,CAAyBV,GAAzB,EAA8B;EAC5B;EACA;EACA;EAEA,IAAIC,OAAO,GAAGU,OAAO,CAACC,GAAR,CAAYC,QAAZ,IAAwBF,OAAO,CAACC,GAAR,CAAYE,QAApC,IAAgD,EAA9D,CAL4B,CAO5B;;EAEA,IAAIb,OAAO,KAAK,GAAhB,EAAqB;IACnB,OAAO,IAAP;EACD,CAX2B,CAa5B;;;EAEA,IAAIA,OAAO,KAAK,EAAZ,IAAkBF,YAAY,CAACC,GAAD,EAAMC,OAAN,CAAlC,EAAkD;IAChD,OAAO,IAAP;EACD,CAjB2B,CAmB5B;;;EAEA,IAAID,GAAG,CAACE,QAAJ,KAAiB,OAArB,EAA8B;IAC5B,OAAOS,OAAO,CAACC,GAAR,CAAYG,UAAZ,IACAJ,OAAO,CAACC,GAAR,CAAYI,UADZ,IAC0B,IADjC;EAED;;EAED,IAAIhB,GAAG,CAACE,QAAJ,KAAiB,QAArB,EAA+B;IAC7B,OAAOS,OAAO,CAACC,GAAR,CAAYK,WAAZ,IACAN,OAAO,CAACC,GAAR,CAAYM,WADZ,IAEAP,OAAO,CAACC,GAAR,CAAYG,UAFZ,IAGAJ,OAAO,CAACC,GAAR,CAAYI,UAHZ,IAG2B,IAHlC;EAID,CA/B2B,CAiC5B;EACA;;;EAEA,OAAO,IAAP;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiBV,eAAjB"},"metadata":{},"sourceType":"script"}